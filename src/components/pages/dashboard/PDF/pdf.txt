import jsPDF from "jspdf"
import html2canvas from "html2canvas"
import { toast } from "react-toastify"

const COMPANY_LOGO = "src/assets/images/Logo.png"

export async function generatePDF(hotelId, year, activeTab) {
  try {
    // Create a new PDF document
    const pdf = new jsPDF("p", "mm", "a4")
    const pageWidth = pdf.internal.pageSize.getWidth()
    const pageHeight = pdf.internal.pageSize.getHeight()
    const margin = 15
    const contentWidth = pageWidth - margin * 2

    // Get hotel name
    const hotelName =
      hotelId === "All"
        ? "All Hotels"
        : document.querySelector("[data-hotel-select] .select-value")?.textContent || hotelId

    // Add metadata
    pdf.setProperties({
      title: `Hotel Analytics Report - ${hotelName} - ${year}`,
      subject: `Revenue and Sentiment Analysis for ${year}`,
      author: "Hotel Analytics System",
      keywords: "hotel, analytics, revenue, sentiment",
      creator: "Hotel Analytics Dashboard",
    })

    // ===== COVER PAGE =====
    await addCoverPage(pdf, hotelName, year, pageWidth, pageHeight)

    // ===== TABLE OF CONTENTS =====
    pdf.addPage()
    addTableOfContents(pdf, activeTab, pageWidth, margin)

    // Get all chart containers based on the active tab
    const selector = '.tabs-content[data-state="active"] > div'
    const chartContainers = document.querySelectorAll(selector)

    if (chartContainers.length === 0) {
      toast.error("No charts found to include in the PDF")
      return false
    }

    // Force all charts to be visible and fully rendered
    chartContainers.forEach((chart) => {
      if (chart) {
        chart.style.visibility = "visible"
        chart.style.display = "block"
        chart.style.opacity = "1"
      }
    })

    // Wait for charts to fully render - longer delay to ensure SVG rendering
    await new Promise((resolve) => setTimeout(resolve, 2000))

    let pageNumber = 3 // Starting from page 3 (after cover and TOC)

    // Process each chart
    for (let i = 0; i < chartContainers.length; i++) {
      const chart = chartContainers[i]

      // Add a new page for each chart
      pdf.addPage()

      // Add header and footer
      addHeaderFooter(pdf, pageNumber, pageWidth, pageHeight, hotelName, year)
      pageNumber++

      // Get chart title and description
      const titleElement = chart.querySelector(".card-title")
      const descElement = chart.querySelector(".card-description")

      const title = titleElement ? titleElement.textContent : `Chart ${i + 1}`
      const description = descElement ? descElement.textContent : ""

      // Add section title
      pdf.setFontSize(16)
      pdf.setTextColor(33, 33, 33)
      pdf.setFont("helvetica", "bold")
      pdf.text(title, margin, 30)

      // Add description if available
      if (description) {
        pdf.setFontSize(10)
        pdf.setFont("helvetica", "italic")
        pdf.setTextColor(100, 100, 100)
        pdf.text(description, margin, 38)
      }

      chart.scrollIntoView({ behavior: "auto", block: "center" })

      try {
        const chartClone = chart.cloneNode(true)
        document.body.appendChild(chartClone)

        // Style the clone for optimal capture
        chartClone.style.position = "absolute"
        chartClone.style.top = "0"
        chartClone.style.left = "0"
        chartClone.style.width = "800px" // Fixed width for better quality
        chartClone.style.height = "600px" // Fixed height for better quality
        chartClone.style.visibility = "visible"
        chartClone.style.display = "block"
        chartClone.style.opacity = "1"
        chartClone.style.zIndex = "-1000" // Hide from view but keep rendered
        chartClone.style.backgroundColor = "#ffffff"

        // Make sure all SVG elements are visible
        const svgElements = chartClone.querySelectorAll("svg")
        svgElements.forEach((svg) => {
          svg.style.visibility = "visible"
          svg.style.display = "block"
          svg.style.opacity = "1"
        })

        // Wait for clone to render
        await new Promise((resolve) => setTimeout(resolve, 500))

        // Capture chart as canvas with improved settings
        const canvas = await html2canvas(chartClone, {
          scale: 2, // Higher scale for better quality
          logging: false,
          useCORS: true,
          allowTaint: true,
          backgroundColor: "#ffffff",
          imageTimeout: 15000, // Longer timeout for complex charts
          onclone: (clonedDoc) => {
            // Additional visibility fixes in the cloned document
            const clonedChart = clonedDoc.body.lastChild
            if (clonedChart) {
              // Force all SVG elements to be visible
              const allSvgs = clonedChart.querySelectorAll("svg")
              allSvgs.forEach((svg) => {
                svg.setAttribute("width", "100%")
                svg.setAttribute("height", "100%")
                svg.style.visibility = "visible"
                svg.style.display = "block"
              })

              // Force all chart elements to be visible
              const chartElements = clonedChart.querySelectorAll(
                ".recharts-wrapper, .recharts-surface, .recharts-layer",
              )
              chartElements.forEach((el) => {
                el.style.visibility = "visible"
                el.style.display = "block"
              })
            }
          },
        })

        // Remove the clone after capture
        document.body.removeChild(chartClone)

        // Convert canvas to image
        const imgData = canvas.toDataURL("image/png")

        // Calculate image dimensions to fit page width while maintaining aspect ratio
        const imgWidth = contentWidth
        const imgHeight = (canvas.height * imgWidth) / canvas.width

        // Add image to PDF
        pdf.addImage(imgData, "PNG", margin, description ? 45 : 38, imgWidth, imgHeight)
      } catch (error) {
        console.error(`Error capturing chart ${i + 1}:`, error)

        // Add error message in the PDF
        pdf.setTextColor(255, 0, 0)
        pdf.setFontSize(12)
        pdf.text(`Error rendering chart: ${error.message}`, margin, 50)

        // Try alternative capture method
        try {
          toast.info("Trying alternative capture method for chart...", { autoClose: 1000 })

          // Direct capture without cloning
          const canvas = await html2canvas(chart, {
            scale: 1.5,
            logging: true,
            useCORS: true,
            allowTaint: true,
            backgroundColor: "#ffffff",
          })

          const imgData = canvas.toDataURL("image/png")
          const imgWidth = contentWidth
          const imgHeight = (canvas.height * imgWidth) / canvas.width

          pdf.addImage(imgData, "PNG", margin, description ? 45 : 38, imgWidth, imgHeight)

          // Add note about alternative method
          pdf.setTextColor(100, 100, 100)
          pdf.setFontSize(8)
          pdf.text(
            "(Chart captured using alternative method)",
            margin,
            description ? 45 + imgHeight + 5 : 38 + imgHeight + 5,
          )
        } catch (fallbackError) {
          console.error("Alternative capture also failed:", fallbackError)
          pdf.text("Chart could not be rendered after multiple attempts.", margin, 65)
        }
      }
    }

    // Add summary page
    pdf.addPage()
    addHeaderFooter(pdf, pageNumber, pageWidth, pageHeight, hotelName, year)
    addSummaryPage(pdf, hotelName, year, activeTab, margin, pageWidth)

    // Save the PDF with a well-formatted name
    const formattedHotelName = hotelName.replace(/\s+/g, "_").replace(/[^\w-]/g, "")
    pdf.save(`Hotel_Analytics_${formattedHotelName}_${year}_Report.pdf`)

    return true
  } catch (error) {
    console.error("Error generating PDF:", error)
    toast.error(`PDF generation failed: ${error.message}`)
    return false
  }
}

async function addCoverPage(pdf, hotelName, year, pageWidth, pageHeight) {
    pdf.setFillColor(245, 247, 250)
    pdf.rect(0, 0, pageWidth, pageHeight, "F")
  
    try {
      const dataUrl = await loadImageAsDataURL(COMPANY_LOGO)
      const logoWidth = 40
      const logoHeight = 15 
      pdf.addImage(dataUrl, "PNG", (pageWidth - logoWidth) / 2, 30, logoWidth, logoHeight)
    } catch (e) {
      console.warn("Logo could not be loaded, skipping:", e)
    }

  // Title
  pdf.setFontSize(28)
  pdf.setTextColor(33, 33, 33)
  pdf.setFont("helvetica", "bold")
  pdf.text("Hotel Analytics Report", pageWidth / 2, pageHeight / 2 - 20, { align: "center" })

  // Subtitle
  pdf.setFontSize(18)
  pdf.setFont("helvetica", "normal")
  pdf.text(hotelName, pageWidth / 2, pageHeight / 2, { align: "center" })

  // Year
  pdf.setFontSize(16)
  pdf.text(`Annual Report ${year}`, pageWidth / 2, pageHeight / 2 + 15, { align: "center" })

  // Date
  pdf.setFontSize(10)
  pdf.setTextColor(100, 100, 100)
  pdf.text(
    `Generated on: ${new Date().toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
    })}`,
    pageWidth / 2,
    pageHeight / 2 + 30,
    { align: "center" },
  )

  // Bottom decoration
  pdf.setFillColor(0, 123, 255)
  pdf.rect(0, pageHeight - 20, pageWidth, 20, "F")
}

function loadImageAsDataURL(src) {
    return new Promise((resolve, reject) => {
      const img = new Image()
      img.crossOrigin = "Anonymous"
      img.onload = () => {
        const canvas = document.createElement("canvas")
        canvas.width = img.width
        canvas.height = img.height
        const ctx = canvas.getContext("2d")
        ctx.drawImage(img, 0, 0)
        resolve(canvas.toDataURL("image/png"))
      }
      img.onerror = reject
      img.src = src
    })
  }  


// Function to add table of contents
function addTableOfContents(pdf, activeTab, pageWidth, margin) {
  pdf.setFontSize(20)
  pdf.setTextColor(33, 33, 33)
  pdf.setFont("helvetica", "bold")
  pdf.text("Table of Contents", pageWidth / 2, 30, { align: "center" })

  pdf.setFontSize(12)
  pdf.setFont("helvetica", "normal")

  let yPosition = 50

  // Add TOC entries based on active tab
  if (activeTab === "revenue") {
    pdf.text("1. Monthly Revenue Trends", margin, yPosition)
    pdf.text("3", pageWidth - margin, yPosition, { align: "right" })
    yPosition += 10

    pdf.text("2. Revenue vs Sentiment Analysis", margin, yPosition)
    pdf.text("4", pageWidth - margin, yPosition, { align: "right" })
    yPosition += 10

    pdf.text("3. Review Volume vs Revenue", margin, yPosition)
    pdf.text("5", pageWidth - margin, yPosition, { align: "right" })
  } else {
    pdf.text("1. Composite Sentiment Index (CSI) Over Time", margin, yPosition)
    pdf.text("3", pageWidth - margin, yPosition, { align: "right" })
    yPosition += 10

    pdf.text("2. Sentiment Ratios", margin, yPosition)
    pdf.text("4", pageWidth - margin, yPosition, { align: "right" })
    yPosition += 10

    pdf.text("3. CSI vs Revenue Correlation", margin, yPosition)
    pdf.text("5", pageWidth - margin, yPosition, { align: "right" })
  }

  yPosition += 10
  pdf.text("4. Summary and Insights", margin, yPosition)
  pdf.text("6", pageWidth - margin, yPosition, { align: "right" })
}

// Function to add header and footer to each page
function addHeaderFooter(pdf, pageNumber, pageWidth, pageHeight, hotelName, year) {
  // Header
  pdf.setFillColor(245, 247, 250)
  pdf.rect(0, 0, pageWidth, 15, "F")

  pdf.setFontSize(8)
  pdf.setTextColor(100, 100, 100)
  pdf.text(`Hotel Analytics Report - ${hotelName} - ${year}`, 15, 10)

  // Footer
  pdf.setFillColor(245, 247, 250)
  pdf.rect(0, pageHeight - 15, pageWidth, 15, "F")

  pdf.setFontSize(8)
  pdf.text(`Page ${pageNumber}`, pageWidth / 2, pageHeight - 5, { align: "center" })
  pdf.text(`Generated on ${new Date().toLocaleDateString()}`, pageWidth - 15, pageHeight - 5, { align: "right" })
}

// Function to add a summary page
function addSummaryPage(pdf, hotelName, year, activeTab, margin, pageWidth) {
  pdf.setFontSize(18)
  pdf.setTextColor(33, 33, 33)
  pdf.setFont("helvetica", "bold")
  pdf.text("Summary and Insights", pageWidth / 2, 30, { align: "center" })

  pdf.setFontSize(12)
  pdf.setFont("helvetica", "normal")
  pdf.setTextColor(60, 60, 60)

  let yPosition = 50

  // Add summary content based on active tab
  if (activeTab === "revenue") {
    pdf.text("Revenue Performance Summary", margin, yPosition)
    yPosition += 10

    pdf.setFontSize(10)
    pdf.text("This report provides a comprehensive analysis of revenue performance for", margin, yPosition)
    yPosition += 6
    pdf.text(`${hotelName} during ${year}. The analysis includes monthly revenue trends,`, margin, yPosition)
    yPosition += 6
    pdf.text("correlation with customer sentiment, and impact of review volume on revenue.", margin, yPosition)
    yPosition += 15

    pdf.setFontSize(12)
    pdf.setFont("helvetica", "bold")
    pdf.text("Key Observations:", margin, yPosition)
    yPosition += 10

    pdf.setFontSize(10)
    pdf.setFont("helvetica", "normal")
    pdf.text("• Revenue trends show seasonal patterns that can inform business strategy", margin, yPosition)
    yPosition += 8
    pdf.text("• Customer sentiment appears to correlate with revenue performance", margin, yPosition)
    yPosition += 8
    pdf.text("• Review volume provides insights into customer engagement levels", margin, yPosition)
  } else {
    pdf.text("Sentiment Analysis Summary", margin, yPosition)
    yPosition += 10

    pdf.setFontSize(10)
    pdf.text("This report provides a detailed analysis of customer sentiment for", margin, yPosition)
    yPosition += 6
    pdf.text(
      `${hotelName} during ${year}. The analysis includes the Composite Sentiment Index (CSI)`,
      margin,
      yPosition,
    )
    yPosition += 6
    pdf.text("over time, sentiment ratios, and correlation between sentiment and revenue.", margin, yPosition)
    yPosition += 15

    pdf.setFontSize(12)
    pdf.setFont("helvetica", "bold")
    pdf.text("Key Observations:", margin, yPosition)
    yPosition += 10

    pdf.setFontSize(10)
    pdf.setFont("helvetica", "normal")
    pdf.text("• The Composite Sentiment Index shows overall customer satisfaction trends", margin, yPosition)
    yPosition += 8
    pdf.text("• Sentiment ratios provide insights into the distribution of customer feedback", margin, yPosition)
    yPosition += 8
    pdf.text("• There appears to be a correlation between sentiment scores and revenue", margin, yPosition)
  }

  yPosition += 20

  pdf.setFontSize(12)
  pdf.setFont("helvetica", "bold")
  pdf.text("Recommendations:", margin, yPosition)
  yPosition += 10

  pdf.setFontSize(10)
  pdf.setFont("helvetica", "normal")
  pdf.text("1. Continue monitoring the relationship between sentiment and revenue", margin, yPosition)
  yPosition += 8
  pdf.text("2. Develop strategies to address seasonal variations in performance", margin, yPosition)
  yPosition += 8
  pdf.text("3. Focus on improving areas with negative sentiment to boost overall performance", margin, yPosition)
  yPosition += 8
  pdf.text("4. Consider implementing targeted marketing during periods of lower engagement", margin, yPosition)
}


/* eslint-disable react/prop-types */
import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Download, Loader2 } from "lucide-react"
import { generatePDF } from "./Pdf-generator"
import { toast } from "react-toastify"

export function PDFButton({ hotelId, year, activeTab }) {
  const [isGenerating, setIsGenerating] = useState(false)

  const handleDownload = async () => {
    setIsGenerating(true)
    toast.info("Preparing your PDF report. This may take a moment...", { autoClose: 3000 })

    try {
      setTimeout(async () => {
        try {
          const chartContainers = document.querySelectorAll(".card")
          chartContainers.forEach((chart) => {
            if (chart) {
              chart.style.visibility = "visible"
              chart.style.display = "block"

              // Make sure all SVG elements are visible
              const svgs = chart.querySelectorAll("svg")
              svgs.forEach((svg) => {
                svg.style.visibility = "visible"
                svg.style.display = "block"
              })
            }
          })

          // Wait for charts to be fully rendered
          await new Promise((resolve) => setTimeout(resolve, 1500))

          const success = await generatePDF(hotelId, year, activeTab)

          if (success) {
            toast.success("PDF generated successfully! Your analytics report has been downloaded.")
          } else {
            throw new Error("Failed to generate PDF")
          }
        } catch (error) {
          console.error("PDF generation error:", error)
          toast.error(`PDF generation failed: ${error.message}. Please try again.`)
        } finally {
          setIsGenerating(false)
        }
      }, 1000)
    } catch (error) {
      console.error("PDF generation error:", error)
      toast.error(`PDF generation failed: ${error.message}. Please try again.`)
      setIsGenerating(false)
    }
  }

  return (
    <Button
      onClick={handleDownload}
      className="gap-2 bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 transition-all duration-300 shadow-md"
      disabled={isGenerating}
      variant="default"
    >
      {isGenerating ? <Loader2 className="h-4 w-4 animate-spin" /> : <Download className="h-4 w-4" />}
      {isGenerating ? "Generating PDF..." : "Download PDF Report"}
    </Button>
  )
}
